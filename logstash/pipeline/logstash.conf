input {
	tcp {
		port => 5000
	}
 
  beats {
    type => "logs"
    port => "5044"
  }
}

## Add your filters / logstash plugins configuration here
# filter {
#   grok {
#      match => { "message" => "%{IPORHOST:remote_ip} - %{DATA:user_name} \[%{HTTPDATE:access_time}\] \"%{WORD:http_method} %{DATA:url} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} %{NUMBER:body_sent_bytes} \"%{DATA:referrer}\" \"%{DATA:agent}\"" }
#   }
  
# }

filter {
    # Define filters for each log type

    # Nginx Error Log
    #if [type] == "nginx-error" {
    if [event][module] == "nginx" {
        if [fileset][name] == "error" {
        #if [event][dataset] == "error" {
            grok {
                #match => { "message" => "%{TIMESTAMP:timestamp} %{WORD:level} \[pid %{NUMBER:pid}\] %{GREEDYDATA:message}" }
                match => { "message" => "%{DATA:timestamp} \[%{LOGLEVEL:level}\] %{NUMBER:pid}#%{NUMBER:tid}: (?:\*%{NUMBER:connection_id} )?%{GREEDYDATA:message}" }
                add_field => { "hostname" => "%{HOSTNAME}" }  # Assuming hostname is set in Logstash input
                add_field => { "app_name" => "nginx" }  # Set app_name manually for Nginx logs
                add_field => { "log_level" => "%{level}" }
                add_field => { "message" => "%{message}" }
            }
        }

        # Nginx Access Log
        #if [type] == "nginx-access" {
        else if [fileset][name] == "access" {
        #else if [event][dataset] == "access" {
            grok {
              #match => { "message" => "%{IP:remote_addr} - - %{HTTPDATE:timestamp} %{WORD:method} %{URIPATH:request_url} %{NUMBER:status} %{NUMBER:bytes_sent} %{GREEDYDATA:referrer} %{GREEDYDATA:user_agent}" }
              match => { "message" => "%{IPORHOST:remote_addr} - %{DATA:hostname} \[%{HTTPDATE:timestamp}\] \"%{WORD:method} %{DATA:request_url} HTTP/%{NUMBER:http_version}\" %{NUMBER:status} %{NUMBER:body_sent:bytes} \"%{GREEDYDATA:referrer}\" \"%{GREEDYDATA:http_agent}\" \"-\""}
              #add_field => { "hostname" => "%{HOSTNAME}" }  # Assuming hostname is set in Logstash input
              add_field => { "app_name" => "nginx" }  # Set app_name manually for Nginx logs
              add_field => { "log_level" => "info" }  # Assuming access logs are informational
              #add_field => { "message" => "%{message}" }
              #break_on_match => false  # Allow parsing parameters after request_url
              # Extract parameters using kv pair grok pattern
              #match => { "message" => %{GREEDYDATA:params} }
              #add_field => { "parameters" => "%{kvpairs}" }
            }
        }
    }

    # SLF4J Log (assuming simple format)
    #if [type] == "slf4j" {
    else if [fileset][name] =~ "spring" {
        grok {
          #match => { "message" => "%{HTTPDATE:timestamp} %{LOGLEVEL:log_level} \[thread: %{WORD:thread}\] %{GREEDYDATA:message}" }
          match => { "message" => "%{GREEDYDATA:timestamp} %{LOGLEVEL:log_level} %{NUMBER:pid} --- \[%{GREEDYDATA:xxx}\] %{GREEDYDATA:app_name} : %{GREEDYDATA:message}"}
          #add_field => { "hostname" => "%{HOSTNAME}" }  # Assuming hostname is set in Logstash input
          #add_field => { "app_name" => "%{source}" }  # Assuming source field contains app name
          #add_field => { "message" => "%{message}" }
        }
    }

    # Syslog (basic RFC 5424 format)
    #if [type] == "syslog" {
    else if [fileset][name] =~ "syslog" {
        grok {
          #match => { "message" => "<%{NUMBER:syslog_version}>%{HTTPDATE:timestamp} %{SYSLOGFACILITY:-} %{SYSLOGSEVERITY:-} %{HOSTNAME:source} %{PROGNAME:app_name} %{PID:process_id} %{MESSAGE:message}" }
          match => { "message" => "<%{NUMBER:syslog_version}>%{HTTPDATE:timestamp} %{SYSLOGFACILITY:log_level} %{HOSTNAME:source} %{PROG:app_name} %{POSINT:process_id} %{GREEDYDATA:message}" }
          #match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:app_name}: %{GREEDYDATA:message}" }
          #add_field => { "log_level" => "%{syslogfacility:-}%{syslogseverity:-}" } # Combine facility and severity
          add_field => { "message" => "%{message}" }
        }
    }

 # Remove the "message" field after parsing (optional)
 #mutate {
 #  remove_field => "message"
 #}
}

# filter {
#   if [event][module] == "nginx" {
#     if [fileset][name] == "access" {
#       grok {
#         match => { "message" => "%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent}" }
#       }
#     }
#     else if [fileset][name] == "error" {
#       grok {
#         match => { "message" => "%{DATA:timestamp} \[%{LOGLEVEL:log_level}\] %{NUMBER:pid}#%{NUMBER:tid}: (?:\*%{NUMBER:connection_id} )?%{GREEDYDATA:message}" }
#       }
#     }
#   }
#   else if [event][module] == "syslog" {
#     grok {
#       match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:app_name}: %{GREEDYDATA:message}" }
#     }
#   }
#   else if [event][module] == "slf4j" {
#     grok {
#       match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:log_level}\] %{JAVACLASS:app_name} - %{GREEDYDATA:message}" }
#     }
#   }
#   # Add additional filters here to extract other fields like container_id, request_url, and parameters as needed.
# }

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-nginx-access-test1"
    ilm_enabled => "false"
		user => "elastic"
		password => "iisiuser"
	}
}
